/**
 * üîç UTILIDADES DE VALIDACI√ìN PARA USUARIOS
 * 
 * Este archivo centraliza todas las funciones de validaci√≥n espec√≠ficas para usuarios,
 * incluyendo validaciones para creaci√≥n, actualizaci√≥n y algoritmo de c√©dula ecuatoriana.
 * 
 * Prop√≥sito:
 * - Centralizar la l√≥gica de validaci√≥n de usuarios
 * - Proporcionar validaciones espec√≠ficas para diferentes operaciones
 * - Implementar algoritmos de validaci√≥n oficiales (c√©dula ecuatoriana)
 * - Facilitar el mantenimiento y reutilizaci√≥n de validaciones
 * 
 * @autor Sistema de Facturaci√≥n
 * @versi√≥n 1.0.0
 * @desde 2025-06-25
 */

import type { UserDto, UserCreateDto, UserUpdateDto } from '../@types/users';

/**
 * üÜî VALIDADOR DE C√âDULA ECUATORIANA
 * 
 * Implementa el algoritmo oficial del Registro Civil de Ecuador para
 * validar la autenticidad de una c√©dula de identidad.
 * 
 * üîç PROCESO DE VALIDACI√ìN:
 * 1. Verifica que tenga exactamente 10 d√≠gitos num√©ricos
 * 2. Valida que los primeros 2 d√≠gitos representen una provincia v√°lida (01-24)
 * 3. Verifica que el tercer d√≠gito sea menor a 6 (reservado para futuro uso)
 * 4. Aplica el algoritmo de m√≥dulo 10 con coeficientes espec√≠ficos
 * 5. Calcula el d√≠gito verificador y lo compara con el √∫ltimo d√≠gito
 * 
 * @param {string} cedula - C√©dula de 10 d√≠gitos a validar
 * @returns {boolean} true si la c√©dula es v√°lida, false caso contrario
 */
export const validateCedula = (cedula: string): boolean => {
  // Constantes del algoritmo oficial de validaci√≥n
  const tamanoLongitudCedula = 10;
  const coeficientes = [2, 1, 2, 1, 2, 1, 2, 1, 2]; // Coeficientes oficiales del algoritmo
  const numeroProvincias = 24; // M√°ximo n√∫mero de provincias en Ecuador
  const tercerDigito = 6; // L√≠mite m√°ximo para el tercer d√≠gito

  // Validaci√≥n inicial: solo n√∫meros y longitud exacta
  if (!/^[0-9]+$/.test(cedula) || cedula.length !== tamanoLongitudCedula) {
    return false;
  }

  // Extraer y validar c√≥digo de provincia (primeros 2 d√≠gitos)
  const provincia = parseInt(cedula.substring(0, 2), 10);
  const digitoTres = parseInt(cedula[2], 10);

  // Validar rango de provincia y tercer d√≠gito
  if (provincia <= 0 || provincia > numeroProvincias || digitoTres >= tercerDigito) {
    return false;
  }

  // Aplicar algoritmo de m√≥dulo 10
  const digitoVerificadorRecibido = parseInt(cedula[9], 10);
  let total = 0;

  for (let k = 0; k < coeficientes.length; k++) {
    const valor = coeficientes[k] * parseInt(cedula[k], 10);
    // Si el resultado es >= 10, restar 9 (parte del algoritmo)
    total += valor >= 10 ? valor - 9 : valor;
  }

  // Calcular d√≠gito verificador
  const digitoVerificadorObtenido = total % 10 === 0 ? 0 : 10 - (total % 10);

  return digitoVerificadorObtenido === digitoVerificadorRecibido;
};

/**
 * üîç VALIDADOR COMPLETO PARA CREACI√ìN DE USUARIO
 * 
 * Valida todos los campos requeridos para crear un nuevo usuario,
 * incluyendo validaciones espec√≠ficas de formato y unicidad.
 * 
 * @param {UserCreateDto & { confirmPassword?: string }} user - Datos del usuario a validar
 * @param {UserDto[]} existingUsers - Lista de usuarios existentes para verificar duplicados
 * @returns {Record<string, string>} Objeto con errores por campo
 */
export const validateUserForCreation = (
  user: UserCreateDto & { confirmPassword?: string },
  existingUsers: UserDto[] = []
): Record<string, string> => {
  const errors: Record<string, string> = {};

  // üÜî Validaci√≥n de c√©dula de identidad
  if (!user.identificationNumber?.trim()) {
    errors.identificationNumber = 'El n√∫mero de identificaci√≥n es obligatorio';
  } else if (user.identificationNumber.length !== 10) {
    errors.identificationNumber = 'La c√©dula debe tener exactamente 10 caracteres';
  } else if (!/^[0-9]+$/.test(user.identificationNumber)) {
    errors.identificationNumber = 'La c√©dula solo debe contener n√∫meros';
  } else if (!validateCedula(user.identificationNumber)) {
    errors.identificationNumber = 'La c√©dula no es v√°lida';
  } else if (existingUsers.some((u) => u.identificationNumber === user.identificationNumber)) {
    errors.identificationNumber = 'Ya existe un usuario con esta c√©dula';
  }

  // üë§ Validaci√≥n de nombre de usuario
  if (!user.userName?.trim()) {
    errors.userName = 'El nombre de usuario es obligatorio';
  } else if (user.userName.length < 3) {
    errors.userName = 'El nombre de usuario debe tener al menos 3 caracteres';
  } else if (user.userName.length > 50) {
    errors.userName = 'El nombre de usuario no puede superar los 50 caracteres';
  } else if (existingUsers.some((u) => u.userName.toLowerCase() === user.userName.toLowerCase())) {
    errors.userName = 'Ya existe un usuario con este nombre de usuario';
  }

  // üè∑Ô∏è Validaci√≥n de nombre completo
  if (!user.name?.trim()) {
    errors.name = 'El nombre es obligatorio';
  } else if (user.name.length < 2) {
    errors.name = 'El nombre debe tener al menos 2 caracteres';
  } else if (user.name.length > 100) {
    errors.name = 'El nombre no puede superar los 100 caracteres';
  }

  // üìß Validaci√≥n de email
  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  if (!user.email?.trim()) {
    errors.email = 'El correo electr√≥nico es obligatorio';
  } else if (user.email.length > 255) {
    errors.email = 'El correo electr√≥nico no puede superar los 255 caracteres';
  } else if (!emailRegex.test(user.email)) {
    errors.email = 'El correo electr√≥nico no es v√°lido';
  } else if (existingUsers.some((u) => u.email.toLowerCase() === user.email.toLowerCase())) {
    errors.email = 'Ya existe un usuario con este correo electr√≥nico';
  }

  // üîê Validaci√≥n de contrase√±a
  if (!user.password?.trim()) {
    errors.password = 'La contrase√±a es obligatoria';
  } else {
    // üõ°Ô∏è Aplicar pol√≠ticas de seguridad para contrase√±as
    const passwordRules = [
      { regex: /\d/, message: 'Debe contener al menos un d√≠gito.' },
      { regex: /[a-z]/, message: 'Debe contener al menos una letra min√∫scula.' },
      { regex: /[A-Z]/, message: 'Debe contener al menos una letra may√∫scula.' },
      { regex: /[^a-zA-Z0-9]/, message: 'Debe contener al menos un car√°cter no alfanum√©rico.' },
      { regex: /.{4,}/, message: 'Debe tener al menos 4 caracteres.' },
    ];

    for (const rule of passwordRules) {
      if (!rule.regex.test(user.password)) {
        errors.password = rule.message;
        break; // üö´ Solo mostrar el primer error encontrado
      }
    }
  }

  // üîÑ Validaci√≥n de confirmaci√≥n de contrase√±a
  if (user.password && user.confirmPassword && user.password !== user.confirmPassword) {
    errors.confirmPassword = 'Las contrase√±as no coinciden';
  }

  // üé≠ Validaci√≥n de roles
  if (!user.roles || user.roles.length === 0) {
    errors.roles = 'Debe seleccionar al menos un rol';
  }

  return errors;
};

/**
 * üîç VALIDADOR ESPEC√çFICO PARA ACTUALIZACI√ìN DE USUARIO
 * 
 * Valida solo los campos editables durante la actualizaci√≥n de un usuario,
 * excluyendo campos como contrase√±a y datos no modificables.
 * 
 * @param {UserUpdateDto} user - Datos del usuario a validar
 * @param {UserDto[]} existingUsers - Lista de usuarios existentes para verificar duplicados
 * @returns {Record<string, string>} Objeto con errores por campo
 */
export const validateUserForUpdate = (
  user: UserUpdateDto,
  existingUsers: UserDto[] = []
): Record<string, string> => {
  const errors: Record<string, string> = {};

  // üÜî Validaci√≥n de c√©dula de identidad
  if (!user.identificationNumber?.trim()) {
    errors.identificationNumber = 'El n√∫mero de identificaci√≥n es obligatorio';
  } else if (user.identificationNumber.length !== 10) {
    errors.identificationNumber = 'La c√©dula debe tener exactamente 10 caracteres';
  } else if (!/^[0-9]+$/.test(user.identificationNumber)) {
    errors.identificationNumber = 'La c√©dula solo debe contener n√∫meros';
  } else if (!validateCedula(user.identificationNumber)) {
    errors.identificationNumber = 'La c√©dula no es v√°lida';
  } else {
    // Verificar que no exista otro usuario con la misma c√©dula (excluyendo el actual)
    const duplicateUser = existingUsers.find(u => 
      u.identificationNumber === user.identificationNumber && u.id !== user.id
    );
    if (duplicateUser) {
      errors.identificationNumber = 'Ya existe un usuario con esta c√©dula';
    }
  }

  // üë§ Validaci√≥n de nombre de usuario
  if (!user.userName?.trim()) {
    errors.userName = 'El nombre de usuario es obligatorio';
  } else if (user.userName.length < 3) {
    errors.userName = 'El nombre de usuario debe tener al menos 3 caracteres';
  } else if (user.userName.length > 50) {
    errors.userName = 'El nombre de usuario no puede superar los 50 caracteres';
  } else {
    // Verificar que no exista otro usuario con el mismo userName (excluyendo el actual)
    const duplicateUser = existingUsers.find(u => 
      u.userName.toLowerCase() === user.userName.toLowerCase() && u.id !== user.id
    );
    if (duplicateUser) {
      errors.userName = 'Ya existe un usuario con este nombre de usuario';
    }
  }

  // üìß Validaci√≥n de email
  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  if (!user.email?.trim()) {
    errors.email = 'El correo electr√≥nico es obligatorio';
  } else if (user.email.length > 255) {
    errors.email = 'El correo electr√≥nico no puede superar los 255 caracteres';
  } else if (!emailRegex.test(user.email)) {
    errors.email = 'El correo electr√≥nico no es v√°lido';
  } else {
    // Verificar que no exista otro usuario con el mismo email (excluyendo el actual)
    const duplicateUser = existingUsers.find(u => 
      u.email.toLowerCase() === user.email.toLowerCase() && u.id !== user.id
    );
    if (duplicateUser) {
      errors.email = 'Ya existe un usuario con este correo electr√≥nico';
    }
  }

  // üé≠ Validaci√≥n de roles
  if (!user.roles || user.roles.length === 0) {
    errors.roles = 'Debe seleccionar al menos un rol';
  }

  return errors;
};

/**
 * üîß LIMITADORES DE ENTRADA PARA INPUTS
 * 
 * Funciones que limitan y formatean la entrada de datos en los campos del formulario.
 */

/**
 * Limita y formatea la entrada de c√©dula a solo n√∫meros con m√°ximo 10 d√≠gitos
 */
export const formatCedulaInput = (value: string): string => {
  return value.replace(/\D/g, '').slice(0, 10);
};

/**
 * Limita la entrada de nombre de usuario a caracteres alfanum√©ricos y guiones bajos
 */
export const formatUserNameInput = (value: string): string => {
  return value.replace(/[^a-zA-Z0-9_]/g, '').slice(0, 50);
};

/**
 * Limita la entrada de nombre completo a letras, espacios y tildes
 */
export const formatNameInput = (value: string): string => {
  return value.replace(/[^a-zA-Z√°√©√≠√≥√∫√Å√â√ç√ì√ö√±√ë\s]/g, '').slice(0, 100);
};

/**
 * Limita la entrada de email
 */
export const formatEmailInput = (value: string): string => {
  return value.trim().slice(0, 255);
};
