import toast from 'react-hot-toast';
import React from 'react';
import ConfirmToast from '../components/common/ConfirmToast';

/**
 * ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
 * üîî SISTEMA CENTRAL DE NOTIFICACIONES Y CONFIRMACIONES
 * ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
 * 
 * Este archivo contiene todo el sistema de notificaciones moderno que reemplaza
 * completamente a react-toastify y las APIs nativas del navegador.
 * 
 * üìö FUNCIONALIDADES PRINCIPALES:
 * ‚Ä¢ Notificaciones de √©xito, error, advertencia e informaci√≥n
 * ‚Ä¢ Sistema de confirmaciones personalizado con ConfirmToast
 * ‚Ä¢ Estados de carga para operaciones as√≠ncronas
 * ‚Ä¢ Wrapper para automatizar loading/success/error flows
 * ‚Ä¢ Funciones especializadas para diferentes tipos de acciones CRUD
 * 
 * üé® CARACTER√çSTICAS DE DISE√ëO:
 * ‚Ä¢ Estilos consistentes con la paleta de colores del sistema
 * ‚Ä¢ Duraciones apropiadas seg√∫n el tipo de notificaci√≥n
 * ‚Ä¢ Iconos tem√°ticos para cada categor√≠a
 * ‚Ä¢ Posicionamiento uniforme (top-right para notificaciones, top-center para modales)
 * ‚Ä¢ Animaciones suaves y profesionales
 * 
 * üöÄ PARA FUTURAS MEJORAS:
 * ‚Ä¢ Agregar soporte para notificaciones persistentes
 * ‚Ä¢ Implementar sistema de prioridades (high, medium, low)
 * ‚Ä¢ A√±adir soporte para notificaciones con botones de acci√≥n
 * ‚Ä¢ Integrar con sistema de logging para auditor√≠a
 * ‚Ä¢ Agregar soporte para notificaciones offline/queue
 * ‚Ä¢ Implementar templates predefinidos para casos comunes
 * ‚Ä¢ A√±adir soporte para notificaciones con rich content (HTML, im√°genes)
 * ‚Ä¢ Crear sistema de notificaciones push para el browser
 * ‚Ä¢ Implementar categorizaci√≥n y filtrado de notificaciones
 * 
 * üí° EJEMPLO DE USO:
 * import { notifications, confirmAction } from './utils/notifications';
 * 
 * notifications.success('Operaci√≥n exitosa');
 * const confirmed = await confirmAction('¬øContinuar?', 'Confirmar');
 * ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
 */

// ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
// ‚ïë üì¢ OBJETO PRINCIPAL DE NOTIFICACIONES
// ‚ïë 
// ‚ïë Este objeto centraliza todas las funciones de notificaci√≥n b√°sicas.
// ‚ïë Cada funci√≥n est√° optimizada para un tipo espec√≠fico de mensaje.
// ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
export const notifications = {
  /**
   * üü¢ NOTIFICACI√ìN DE √âXITO
   * Muestra un mensaje de √©xito con estilo verde y duraci√≥n optimizada
   * 
   * @param message - Mensaje a mostrar al usuario
   * 
   * üé® Configuraci√≥n visual:
   * ‚Ä¢ Color: Verde (#10b981) - transmite √©xito y confianza
   * ‚Ä¢ Duraci√≥n: 3 segundos (tiempo √≥ptimo para leer sin ser intrusivo)
   * ‚Ä¢ Icono: Checkmark autom√°tico de react-hot-toast
   * ‚Ä¢ Posici√≥n: Top-right (no interfiere con contenido principal)
   * 
   * üí° Casos de uso recomendados:
   * ‚Ä¢ Creaci√≥n exitosa de registros (clientes, productos, facturas)
   * ‚Ä¢ Actualizaci√≥n completada de datos
   * ‚Ä¢ Login exitoso y redirecci√≥n
   * ‚Ä¢ Descarga de archivos completada
   * ‚Ä¢ Env√≠o de formularios exitoso
   * ‚Ä¢ Operaciones de base de datos completadas
   * 
   * üîß Para desarrolladores:
   * ‚Ä¢ Usar mensajes claros y espec√≠ficos
   * ‚Ä¢ Incluir el nombre del recurso afectado cuando sea posible
   * ‚Ä¢ Evitar jerga t√©cnica
   * 
   * @example
   * notifications.success('Cliente "Juan P√©rez" creado exitosamente');
   * notifications.success('Factura #001234 generada correctamente');
   */
  success: (message: string) => {
    toast.success(message, {
      duration: 3000,
      style: {
        background: '#10b981',
        color: '#fff',
        padding: '16px',
        borderRadius: '8px',
        fontWeight: '500',
      },
      iconTheme: {
        primary: '#fff',
        secondary: '#10b981',
      },
    });
  },

  /**
   * üî¥ NOTIFICACI√ìN DE ERROR
   * Muestra un mensaje de error con estilo rojo y duraci√≥n extendida
   * 
   * @param message - Mensaje de error a mostrar al usuario
   * 
   * üé® Configuraci√≥n visual:
   * ‚Ä¢ Color: Rojo (#ef4444) - indica problema que requiere atenci√≥n inmediata
   * ‚Ä¢ Duraci√≥n: 5 segundos (m√°s tiempo para leer y procesar el error)
   * ‚Ä¢ Icono: X autom√°tico de react-hot-toast
   * ‚Ä¢ Posici√≥n: Top-right con prioridad visual alta
   * 
   * üí° Casos de uso recomendados:
   * ‚Ä¢ Errores de validaci√≥n de formularios
   * ‚Ä¢ Fallos en operaciones CRUD (create, read, update, delete)
   * ‚Ä¢ Errores de conectividad con el servidor
   * ‚Ä¢ Datos inv√°lidos o malformados
   * ‚Ä¢ Errores de autorizaci√≥n/autenticaci√≥n
   * ‚Ä¢ Excepciones no controladas que el usuario debe conocer
   * ‚Ä¢ Violaciones de reglas de negocio
   * 
   * üîß Mejores pr√°cticas para desarrolladores:
   * ‚Ä¢ Proporcionar informaci√≥n espec√≠fica y actionable
   * ‚Ä¢ Evitar mostrar stack traces o detalles t√©cnicos
   * ‚Ä¢ Incluir sugerencias de soluci√≥n cuando sea posible
   * ‚Ä¢ Usar un lenguaje amigable, no intimidante
   * ‚Ä¢ Considerar logging adicional para debugging
   * 
   * @example
   * notifications.error('Error al guardar el cliente: Email ya existe');
   * notifications.error('No se pudo conectar con el servidor. Verifique su conexi√≥n');
   */
  error: (message: string) => {
    toast.error(message, {
      duration: 5000,
      style: {
        background: '#ef4444',
        color: '#fff',
        padding: '16px',
        borderRadius: '8px',
        fontWeight: '500',
      },
      iconTheme: {
        primary: '#fff',
        secondary: '#ef4444',
      },
    });
  },

  /**
   * üü° NOTIFICACI√ìN DE ADVERTENCIA
   * Muestra un mensaje de advertencia con estilo √°mbar para situaciones de precauci√≥n
   * 
   * @param message - Mensaje de advertencia a mostrar
   * 
   * üé® Configuraci√≥n visual:
   * ‚Ä¢ Color: √Åmbar (#f59e0b) - indica precauci√≥n sin bloquear la acci√≥n
   * ‚Ä¢ Duraci√≥n: 4 segundos (tiempo intermedio para procesar la advertencia)
   * ‚Ä¢ Icono: Tri√°ngulo de advertencia (‚ö†Ô∏è)
   * ‚Ä¢ Posici√≥n: Top-right con visibilidad media-alta
   * 
   * üí° Casos de uso recomendados:
   * ‚Ä¢ Validaciones que no impiden la acci√≥n pero requieren atenci√≥n
   * ‚Ä¢ Stock bajo en productos (ej: "Quedan solo 5 unidades")
   * ‚Ä¢ Cambios que podr√≠an tener consecuencias imprevistas
   * ‚Ä¢ Recordatorios importantes para el usuario
   * ‚Ä¢ Situaciones que requieren confirmaci√≥n adicional
   * ‚Ä¢ Datos incompletos pero no inv√°lidos
   * ‚Ä¢ L√≠mites pr√≥ximos a ser alcanzados
   * 
   * üîß Gu√≠as de implementaci√≥n:
   * ‚Ä¢ Usar para situaciones intermedias entre info y error
   * ‚Ä¢ Proporcionar contexto sobre por qu√© es importante
   * ‚Ä¢ Incluir recomendaciones de acci√≥n cuando sea apropiado
   * 
   * @example
   * notifications.warning('El producto seleccionado tiene stock bajo (2 unidades)');
   * notifications.warning('Esta acci√≥n afectar√° m√∫ltiples registros relacionados');
   */
  warning: (message: string) => {
    toast(message, {
      icon: '‚ö†Ô∏è',
      duration: 4000,
      style: {
        background: '#f59e0b',
        color: '#fff',
        padding: '16px',
        borderRadius: '8px',
        fontWeight: '500',
      },
    });
  },

  /**
   * üîµ NOTIFICACI√ìN INFORMATIVA
   * Muestra un mensaje informativo con estilo azul para comunicaci√≥n general
   * 
   * @param message - Mensaje informativo a mostrar
   * 
   * üé® Configuraci√≥n visual:
   * ‚Ä¢ Color: Azul (#3b82f6) - neutral, profesional e informativo
   * ‚Ä¢ Duraci√≥n: 3 segundos (tiempo est√°ndar para informaci√≥n general)
   * ‚Ä¢ Icono: S√≠mbolo de informaci√≥n (‚ÑπÔ∏è)
   * ‚Ä¢ Posici√≥n: Top-right sin urgencia visual
   * 
   * üí° Casos de uso recomendados:
   * ‚Ä¢ Informaci√≥n sobre el estado del sistema
   * ‚Ä¢ Consejos y ayudas contextuales para el usuario
   * ‚Ä¢ Confirmaciones de acciones no cr√≠ticas
   * ‚Ä¢ Actualizaciones de estado o progreso
   * ‚Ä¢ Gu√≠as paso a paso para el usuario
   * ‚Ä¢ Informaci√≥n educativa o tips
   * ‚Ä¢ Notificaciones de bienvenida o introducci√≥n
   * 
   * üîß Mejores pr√°cticas:
   * ‚Ä¢ Usar para comunicaci√≥n no urgente
   * ‚Ä¢ Proporcionar valor educativo o contextual
   * ‚Ä¢ Evitar sobrecargar al usuario con demasiada informaci√≥n
   * ‚Ä¢ Considerar si la informaci√≥n es realmente necesaria
   * 
   * @example
   * notifications.info('Tip: Puede usar Ctrl+S para guardar r√°pidamente');
   * notifications.info('Sistema actualizado a la versi√≥n 2.1.0');
   */
  info: (message: string) => {
    toast(message, {
      icon: '‚ÑπÔ∏è',
      duration: 3000,
      style: {
        background: '#3b82f6',
        color: '#fff',
        padding: '16px',
        borderRadius: '8px',
        fontWeight: '500',
      },
    });
  },

  /**
   * ‚è≥ NOTIFICACI√ìN DE CARGA
   * Muestra un indicador de carga para operaciones as√≠ncronas largas
   * 
   * @param message - Mensaje descriptivo de la operaci√≥n en curso
   * @returns string - ID √∫nico del toast para poder eliminarlo despu√©s
   * 
   * üé® Configuraci√≥n visual:
   * ‚Ä¢ Color: Gris (#6b7280) - neutral para procesos en curso
   * ‚Ä¢ Duraci√≥n: Infinita (hasta ser eliminada manualmente)
   * ‚Ä¢ Icono: Spinner animado autom√°tico de react-hot-toast
   * ‚Ä¢ Posici√≥n: Top-right, persiste hasta completion
   * 
   * üí° Casos de uso esenciales:
   * ‚Ä¢ Operaciones de base de datos que toman tiempo considerable
   * ‚Ä¢ Generaci√≥n y descarga de PDFs
   * ‚Ä¢ Uploads de archivos o im√°genes
   * ‚Ä¢ Llamadas a APIs externas lentas
   * ‚Ä¢ Procesos de validaci√≥n complejos
   * ‚Ä¢ Operaciones batch o masivas
   * ‚Ä¢ Sincronizaci√≥n de datos
   * 
   * üîß Patr√≥n de uso recomendado:
   * ```typescript
   * const loadingId = notifications.loading('Generando factura PDF...');
   * try {
   *   await generateInvoicePDF();
   *   notifications.dismiss(loadingId);
   *   notifications.success('PDF generado exitosamente');
   * } catch (error) {
   *   notifications.dismiss(loadingId);
   *   notifications.error('Error al generar PDF');
   * }
   * ```
   * 
   * üöÄ Mejoras futuras sugeridas:
   * ‚Ä¢ A√±adir barra de progreso para operaciones medibles
   * ‚Ä¢ Implementar cancelaci√≥n de operaciones
   * ‚Ä¢ Agregar estimaci√≥n de tiempo restante
   * 
   * @example
   * const id = notifications.loading('Guardando datos del cliente...');
   * // ... operaci√≥n as√≠ncrona ...
   * notifications.dismiss(id);
   */
  loading: (message: string) => {
    return toast.loading(message, {
      style: {
        background: '#6b7280',
        color: '#fff',
        padding: '16px',
        borderRadius: '8px',
        fontWeight: '500',
      },
    });
  },

  /**
   * ‚ùå ELIMINACI√ìN DE NOTIFICACI√ìN
   * Elimina una notificaci√≥n espec√≠fica usando su ID √∫nico
   * 
   * @param toastId - ID √∫nico del toast a eliminar (opcional)
   * 
   * üîß Comportamiento:
   * ‚Ä¢ Si se proporciona toastId: elimina solo esa notificaci√≥n espec√≠fica
   * ‚Ä¢ Si no se proporciona toastId: elimina todas las notificaciones activas
   * 
   * üí° Casos de uso principales:
   * ‚Ä¢ Despu√©s de completar operaciones de loading
   * ‚Ä¢ Para eliminar notificaciones obsoletas program√°ticamente
   * ‚Ä¢ En cleanup de componentes que se desmontan
   * ‚Ä¢ Para controlar el flujo de notificaciones en secuencias complejas
   * ‚Ä¢ Limpiar notificaciones al cambiar de p√°gina o contexto
   * 
   * üöÄ Futuras mejoras:
   * ‚Ä¢ A√±adir dismiss por categor√≠a o tipo
   * ‚Ä¢ Implementar dismiss con delay programable
   * ‚Ä¢ Agregar callback de confirmaci√≥n de dismiss
   */
  dismiss: (toastId?: string) => {
    toast.dismiss(toastId);
  },
};

// ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
// ‚ïë ü§î SISTEMA DE CONFIRMACIONES MODERNAS
// ‚ïë 
// ‚ïë Reemplaza completamente window.confirm() y window.alert() con modales
// ‚ïë personalizados que mantienen la consistencia visual del sistema.
// ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

/**
 * ü§î CONFIRMACI√ìN PRINCIPAL PERSONALIZADA
 * Funci√≥n base para todas las confirmaciones del sistema usando ConfirmToast
 * 
 * @param message - Mensaje principal de la confirmaci√≥n
 * @param title - T√≠tulo opcional del modal (default: sin t√≠tulo)
 * @param confirmText - Texto del bot√≥n de confirmaci√≥n (default: 'S√≠, confirmar')
 * @param cancelText - Texto del bot√≥n de cancelaci√≥n (default: 'Cancelar')
 * @returns Promise<boolean> - true si el usuario confirma, false si cancela
 * 
 * üé® Caracter√≠sticas visuales:
 * ‚Ä¢ Modal personalizado centrado en la pantalla
 * ‚Ä¢ Overlay semi-transparente que oscurece el fondo
 * ‚Ä¢ Animaciones suaves de entrada y salida
 * ‚Ä¢ Botones con colores apropiados seg√∫n el contexto
 * ‚Ä¢ Responsive design que se adapta a cualquier dispositivo
 * 
 * üîß Ventajas sobre window.confirm():
 * ‚Ä¢ Mantiene la consistencia visual con el resto de la aplicaci√≥n
 * ‚Ä¢ Permite personalizaci√≥n completa de textos y estilos
 * ‚Ä¢ No bloquea el thread principal del navegador
 * ‚Ä¢ Funciona correctamente en todos los navegadores modernos
 * ‚Ä¢ Permite escape con ESC y click fuera del modal
 * ‚Ä¢ Accesible con teclado y screen readers
 * 
 * üí° Casos de uso base:
 * ‚Ä¢ Confirmaciones generales que no encajan en categor√≠as espec√≠ficas
 * ‚Ä¢ Base para funciones especializadas (create, update, delete)
 * ‚Ä¢ Confirmaciones de navegaci√≥n (salir sin guardar)
 * ‚Ä¢ Acciones de configuraci√≥n importantes
 * 
 * üöÄ Extensiones futuras sugeridas:
 * ‚Ä¢ Agregar soporte para contenido HTML rico
 * ‚Ä¢ Implementar diferentes tama√±os de modal (small, medium, large)
 * ‚Ä¢ A√±adir iconos contextuales autom√°ticos
 * ‚Ä¢ Soporte para botones adicionales (ej: Save, Don't Save, Cancel)
 * ‚Ä¢ Integraci√≥n con sistema de temas (dark/light mode)
 * 
 * @example
 * const confirmed = await confirmAction(
 *   '¬øEst√° seguro de que desea realizar esta acci√≥n?',
 *   'Confirmaci√≥n requerida',
 *   'S√≠, continuar',
 *   'No, cancelar'
 * );
 * if (confirmed) {
 *   // Usuario confirm√≥ la acci√≥n
 *   proceedWithAction();
 * }
 */
export const confirmAction = async (
  message: string, 
  title?: string,
  confirmText: string = 'S√≠, confirmar',
  cancelText: string = 'Cancelar'
): Promise<boolean> => {
  return new Promise((resolve) => {
    const toastId = toast.custom(
      (t) => React.createElement(ConfirmToast, {
        t,
        title,
        message,
        confirmText,
        cancelText,
        onConfirm: () => resolve(true),
        onCancel: () => resolve(false)
      }),
      {
        duration: Infinity, // Modal persiste hasta que el usuario act√∫e
        position: 'top-center', // Centrado para m√°xima visibilidad
        style: {
          background: 'transparent', // El ConfirmToast maneja su propio styling
          boxShadow: 'none',
          padding: 0,
        },
      }
    );
  });
};

// ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
// ‚ïë ‚ö° WRAPPER AUTOM√ÅTICO PARA OPERACIONES AS√çNCRONAS
// ‚ïë 
// ‚ïë Automatiza el patr√≥n loading -> success/error para operaciones async
// ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

/**
 * ‚ö° WRAPPER AUTOM√ÅTICO CON ESTADOS DE CARGA
 * Envuelve operaciones as√≠ncronas con manejo autom√°tico de loading/success/error
 * 
 * @template T - Tipo de retorno de la funci√≥n as√≠ncrona
 * @param asyncFn - Funci√≥n as√≠ncrona a ejecutar
 * @param loadingMessage - Mensaje a mostrar durante la carga
 * @param successMessage - Mensaje a mostrar en caso de √©xito
 * @param errorMessage - Mensaje opcional para errores (default: mensaje gen√©rico)
 * @returns Promise<T> - Resultado de la funci√≥n as√≠ncrona original
 * 
 * üîÑ Flujo autom√°tico:
 * 1. Muestra loading toast con el mensaje especificado
 * 2. Ejecuta la funci√≥n as√≠ncrona
 * 3. Si es exitosa: elimina loading y muestra success
 * 4. Si falla: elimina loading y muestra error
 * 5. Re-lanza la excepci√≥n para que el c√≥digo llamador pueda manejarla
 * 
 * üí° Casos de uso ideales:
 * ‚Ä¢ Operaciones CRUD en hooks personalizados
 * ‚Ä¢ Llamadas a APIs que pueden tomar tiempo
 * ‚Ä¢ Operaciones de archivo (upload, download, procesamiento)
 * ‚Ä¢ Validaciones as√≠ncronas complejas
 * ‚Ä¢ Sincronizaci√≥n de datos entre sistemas
 * 
 * üéØ Beneficios principales:
 * ‚Ä¢ Reduce c√≥digo boilerplate significativamente
 * ‚Ä¢ Garantiza consistencia en el manejo de estados
 * ‚Ä¢ Previene memory leaks al manejar autom√°ticamente los toast IDs
 * ‚Ä¢ Mejora la experiencia de usuario con feedback inmediato
 * ‚Ä¢ Centraliza la l√≥gica de notificaciones para operaciones async
 * 
 * üîß Ejemplo de uso t√≠pico:
 * ```typescript
 * // En lugar de este patr√≥n manual:
 * const loadingId = notifications.loading('Guardando...');
 * try {
 *   const result = await saveClient(data);
 *   notifications.dismiss(loadingId);
 *   notifications.success('Cliente guardado');
 *   return result;
 * } catch (error) {
 *   notifications.dismiss(loadingId);
 *   notifications.error('Error al guardar');
 *   throw error;
 * }
 * 
 * // Usa este patr√≥n simplificado:
 * return withLoadingToast(
 *   () => saveClient(data),
 *   'Guardando cliente...',
 *   'Cliente guardado exitosamente',
 *   'Error al guardar el cliente'
 * );
 * ```
 * 
 * üöÄ Mejoras futuras sugeridas:
 * ‚Ä¢ Agregar callback opcional onSuccess y onError
 * ‚Ä¢ Implementar retry autom√°tico para ciertos tipos de errores
 * ‚Ä¢ A√±adir soporte para progress tracking
 * ‚Ä¢ Permitir configuraci√≥n de timeouts personalizados
 * ‚Ä¢ Integrar con sistema de analytics para tracking de performance
 */
export const withLoadingToast = async <T>(
  asyncFn: () => Promise<T>,
  loadingMessage: string,
  successMessage: string,
  errorMessage?: string,
  showErrorToast: boolean = true
): Promise<T> => {
  const toastId = notifications.loading(loadingMessage);
  
  try {
    const result = await asyncFn();
    notifications.dismiss(toastId);
    notifications.success(successMessage);
    return result;
  } catch (error) {
    notifications.dismiss(toastId);
    if (showErrorToast) {
      const errorMsg = errorMessage || 'Ha ocurrido un error inesperado';
      notifications.error(errorMsg);
    }
    throw error; // Re-lanza para que el c√≥digo llamador pueda manejar espec√≠ficamente
  }
};

// ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
// ‚ïë üéØ FUNCIONES ESPECIALIZADAS PARA DIFERENTES TIPOS DE ACCIONES
// ‚ïë 
// ‚ïë Cada funci√≥n est√° optimizada para un tipo espec√≠fico de operaci√≥n CRUD
// ‚ïë con textos y estilos apropiados para el contexto.
// ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

/**
 * üóëÔ∏è CONFIRMACI√ìN PARA ACCIONES DESTRUCTIVAS
 * Especializada para eliminaciones, bloqueos y otras acciones irreversibles
 * 
 * @param message - Mensaje espec√≠fico sobre qu√© se va a eliminar/destruir
 * @param title - T√≠tulo del modal (default: 'Confirmar Acci√≥n')
 * @param confirmText - Texto del bot√≥n destructivo (default: 'S√≠, eliminar')
 * @returns Promise<boolean> - true si confirma, false si cancela
 * 
 * üé® Caracter√≠sticas visuales espec√≠ficas:
 * ‚Ä¢ Bot√≥n de confirmaci√≥n en rojo para indicar peligro
 * ‚Ä¢ Texto m√°s enf√°tico sobre la naturaleza irreversible
 * ‚Ä¢ Iconograf√≠a de advertencia para reforzar el mensaje
 * 
 * üí° Casos de uso espec√≠ficos:
 * ‚Ä¢ Eliminaci√≥n de registros de base de datos
 * ‚Ä¢ Bloqueo/desactivaci√≥n de usuarios
 * ‚Ä¢ Cancelaci√≥n de procesos en curso
 * ‚Ä¢ Limpieza de datos o cache
 * ‚Ä¢ Revocaci√≥n de permisos o accesos
 * ‚Ä¢ Reset de configuraciones importantes
 * 
 * üîß Mejores pr√°cticas de uso:
 * ‚Ä¢ Ser espec√≠fico sobre qu√© se eliminar√° (nombre, cantidad, etc.)
 * ‚Ä¢ Mencionar consecuencias si las hay
 * ‚Ä¢ Usar verbos claros como "eliminar", "borrar", "desactivar"
 * 
 * @example
 * const confirmed = await confirmDestructiveAction(
 *   'Se eliminar√° el cliente "Juan P√©rez" y todas sus facturas asociadas. Esta acci√≥n no se puede deshacer.',
 *   'Eliminar Cliente',
 *   'S√≠, eliminar permanentemente'
 * );
 */
export const confirmDestructiveAction = async (
  message: string,
  title: string = 'Confirmar Acci√≥n',
  confirmText: string = 'S√≠, eliminar'
): Promise<boolean> => {
  return confirmAction(message, title, confirmText, 'Cancelar');
};

/**
 * ‚ú® CONFIRMACI√ìN PARA ACCIONES DE CREACI√ìN
 * Optimizada para confirmaciones de creaci√≥n de nuevos registros
 * 
 * @param message - Mensaje sobre qu√© se va a crear
 * @param title - T√≠tulo del modal (default: 'Confirmar Creaci√≥n')
 * @param confirmText - Texto del bot√≥n (default: 'S√≠, crear')
 * @returns Promise<boolean> - true si confirma, false si cancela
 * 
 * üé® Caracter√≠sticas visuales:
 * ‚Ä¢ Bot√≥n de confirmaci√≥n en azul/verde para acciones positivas
 * ‚Ä¢ Tono optimista y constructivo en el mensaje
 * 
 * üí° Casos de uso ideales:
 * ‚Ä¢ Creaci√≥n de clientes, productos, facturas
 * ‚Ä¢ Registro de nuevos usuarios
 * ‚Ä¢ Generaci√≥n de documentos importantes
 * ‚Ä¢ Configuraci√≥n inicial de m√≥dulos
 * ‚Ä¢ Duplicaci√≥n de registros existentes
 * 
 * @example
 * const confirmed = await confirmCreateAction(
 *   '¬øDesea crear un nuevo cliente con los datos ingresados?',
 *   'Crear Nuevo Cliente',
 *   'S√≠, crear cliente'
 * );
 */
export const confirmCreateAction = async (
  message: string,
  title: string = 'Confirmar Creaci√≥n',
  confirmText: string = 'S√≠, crear'
): Promise<boolean> => {
  return confirmAction(message, title, confirmText, 'Cancelar');
};

/**
 * üìù CONFIRMACI√ìN PARA ACCIONES DE ACTUALIZACI√ìN
 * Especializada para confirmaciones de modificaci√≥n de datos existentes
 * 
 * @param message - Mensaje sobre qu√© se va a actualizar
 * @param title - T√≠tulo del modal (default: 'Confirmar Actualizaci√≥n')
 * @param confirmText - Texto del bot√≥n (default: 'S√≠, actualizar')
 * @returns Promise<boolean> - true si confirma, false si cancela
 * 
 * üé® Caracter√≠sticas visuales:
 * ‚Ä¢ Bot√≥n de confirmaci√≥n en azul para cambios constructivos
 * ‚Ä¢ Enfoque en los beneficios de la actualizaci√≥n
 * 
 * üí° Casos de uso principales:
 * ‚Ä¢ Modificaci√≥n de datos de clientes/productos
 * ‚Ä¢ Actualizaci√≥n de configuraciones del sistema
 * ‚Ä¢ Cambios en perfiles de usuario
 * ‚Ä¢ Modificaci√≥n de precios o inventario
 * ‚Ä¢ Actualizaci√≥n de estados o status
 * 
 * @example
 * const confirmed = await confirmUpdateAction(
 *   '¬øDesea guardar los cambios realizados en el cliente "Juan P√©rez"?',
 *   'Guardar Cambios',
 *   'S√≠, guardar'
 * );
 */
export const confirmUpdateAction = async (
  message: string,
  title: string = 'Confirmar Actualizaci√≥n',
  confirmText: string = 'S√≠, actualizar'
): Promise<boolean> => {
  return confirmAction(message, title, confirmText, 'Cancelar');
};

/**
 * ‚ùì CONFIRMACI√ìN SIMPLE S√ç/NO
 * Para confirmaciones b√°sicas sin contexto espec√≠fico
 * 
 * @param message - Pregunta simple a confirmar
 * @returns Promise<boolean> - true para S√≠, false para No
 * 
 * üí° Casos de uso:
 * ‚Ä¢ Confirmaciones r√°pidas y simples
 * ‚Ä¢ Preguntas binarias sin consecuencias importantes
 * ‚Ä¢ Flujos donde el contexto es claro
 * 
 * @example
 * const proceed = await confirmSimple('¬øDesea continuar?');
 */
export const confirmSimple = async (message: string): Promise<boolean> => {
  return confirmAction(message, '', 'S√≠', 'No');
};

// ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
// ‚ïë üö® FUNCIONES DE ALERTA ESPECIALIZADAS
// ‚ïë 
// ‚ïë Reemplazan window.alert() con toast personalizados
// ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

/**
 * üì¢ ALERTA GENERAL
 * Reemplaza window.alert() con toast informativo
 * 
 * @param message - Mensaje de la alerta
 * @param title - T√≠tulo opcional
 * 
 * üí° Cu√°ndo usar vs notifications.info():
 * ‚Ä¢ alertUser(): Para mensajes importantes que requieren atenci√≥n
 * ‚Ä¢ notifications.info(): Para informaci√≥n contextual o tips
 */
export const alertUser = (message: string, title?: string): void => {
  if (title) {
    notifications.info(`${title}: ${message}`);
  } else {
    notifications.info(message);
  }
};

/**
 * ‚ÑπÔ∏è MOSTRAR INFORMACI√ìN
 * Wrapper directo para notifications.info con sem√°ntica clara
 */
export const showInfo = (message: string): void => {
  notifications.info(message);
};

/**
 * ‚ö†Ô∏è MOSTRAR ADVERTENCIA
 * Wrapper directo para notifications.warning con sem√°ntica clara
 */
export const showWarning = (message: string): void => {
  notifications.warning(message);
};

/**
 * ‚ùå MOSTRAR ERROR
 * Wrapper directo para notifications.error con sem√°ntica clara
 */
export const showError = (message: string): void => {
  notifications.error(message);
};

/**
 * ‚úÖ MOSTRAR √âXITO
 * Wrapper directo para notifications.success con sem√°ntica clara
 */
export const showSuccess = (message: string): void => {
  notifications.success(message);
};

/**
 * ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
 * üìã GU√çA R√ÅPIDA DE USO PARA DESARROLLADORES
 * ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
 * 
 * üéØ PATRONES COMUNES:
 * 
 * 1. OPERACI√ìN CRUD CON CONFIRMACI√ìN:
 * ```typescript
 * const handleDelete = async (id: number) => {
 *   const confirmed = await confirmDestructiveAction(
 *     `¬øEliminar el cliente #${id}?`,
 *     'Eliminar Cliente'
 *   );
 *   if (confirmed) {
 *     await withLoadingToast(
 *       () => deleteClient(id),
 *       'Eliminando cliente...',
 *       'Cliente eliminado exitosamente'
 *     );
 *   }
 * };
 * ```
 * 
 * 2. OPERACI√ìN SIMPLE CON NOTIFICACI√ìN:
 * ```typescript
 * try {
 *   await saveData();
 *   notifications.success('Datos guardados');
 * } catch (error) {
 *   notifications.error('Error al guardar');
 * }
 * ```
 * 
 * 3. VALIDACI√ìN CON ADVERTENCIA:
 * ```typescript
 * if (stock < 5) {
 *   notifications.warning(`Stock bajo: ${stock} unidades restantes`);
 * }
 * ```
 * 
 * üöÄ ROADMAP DE MEJORAS FUTURAS:
 * ‚Ä¢ Sistema de notificaciones push del navegador
 * ‚Ä¢ Integraci√≥n con WebSockets para notificaciones en tiempo real
 * ‚Ä¢ Sistema de undo/redo para acciones cr√≠ticas
 * ‚Ä¢ Notificaciones grupales y batch operations
 * ‚Ä¢ Temas personalizables (dark mode, custom branding)
 * ‚Ä¢ Analytics de interacci√≥n con notificaciones
 * ‚Ä¢ Accesibilidad mejorada (ARIA, screen readers)
 * ‚Ä¢ Internacionalizaci√≥n (i18n) para m√∫ltiples idiomas
 * ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
 */
