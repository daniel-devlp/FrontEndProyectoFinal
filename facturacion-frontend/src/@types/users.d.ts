/**
 * üë• DEFINICIONES DE TIPOS PARA USUARIOS
 * 
 * Este archivo contiene todas las definiciones de tipos TypeScript relacionadas con
 * la gesti√≥n de usuarios en el sistema de facturaci√≥n. Proporciona interfaces robustas
 * para garantizar la coherencia en la administraci√≥n de cuentas de usuario y autenticaci√≥n.
 * 
 * Prop√≥sito:
 * - Definir contratos de datos para entidades de usuarios
 * - Asegurar consistencia en operaciones CRUD de usuarios
 * - Facilitar la validaci√≥n autom√°tica de tipos para autenticaci√≥n
 * - Proporcionar interfaces claras para componentes de administraci√≥n de usuarios
 * 
 * Funcionalidades Cubiertas:
 * - Gesti√≥n completa de usuarios del sistema
 * - Autenticaci√≥n y autorizaci√≥n de usuarios
 * - Asignaci√≥n de roles y permisos a usuarios
 * - Control de estado de cuentas (bloqueo/desbloqueo)
 * - Confirmaci√≥n de correos electr√≥nicos
 * - Gesti√≥n de credenciales y perfil de usuario
 * 
 * Caracter√≠sticas de Seguridad:
 * - Manejo seguro de contrase√±as (opcional en lectura)
 * - Control de acceso basado en roles
 * - Estados de cuenta para prevenir accesos no autorizados
 * - Validaci√≥n de correos electr√≥nicos
 * - Identificaci√≥n √∫nica por n√∫mero de documento
 * 
 * Compatibilidad:
 * - Compatible con las respuestas de la API del backend
 * - Integrado con sistema de autenticaci√≥n JWT
 * - Soporte completo para operaciones as√≠ncronas con Promises
 * - Optimizado para React Hook Form y validaci√≥n de formularios
 * 
 * @autor Sistema de Facturaci√≥n
 * @versi√≥n 1.0.0
 * @desde 2025-06-25
 */

/**
 * üë§ DTO principal para datos de usuarios desde la API
 * 
 * Interfaz que representa la estructura exacta de datos de usuarios
 * tal como la devuelve la API del backend.
 */
export interface UserDto {
  /** ID √∫nico del usuario en el sistema */
  id: string;
  /** Nombre de usuario √∫nico para login */
  userName: string;
  /** Nombre completo del usuario */
  name: string;
  /** Direcci√≥n de correo electr√≥nico del usuario */
  email: string;
  /** Estado de confirmaci√≥n del correo electr√≥nico */
  emailConfirmed: boolean;
  /** Lista de roles asignados al usuario */
  roles: string[];
  /** Estado de bloqueo de la cuenta */
  isLocked: boolean;
  /** Contrase√±a del usuario (opcional, solo para operaciones espec√≠ficas) */
  password?: string;
  /** N√∫mero de identificaci√≥n del usuario (opcional) */
  identificationNumber?: string;
}

/**
 * ‚ûï DTO para creaci√≥n de nuevos usuarios
 * 
 * Interfaz que define los datos requeridos para crear un nuevo usuario
 * en el sistema a trav√©s de la API.
 */
export interface UserCreateDto {
  /** Nombre de usuario √∫nico para login */
  userName: string;
  /** Nombre completo del usuario */
  name: string;
  /** Direcci√≥n de correo electr√≥nico del usuario */
  email: string;
  /** Contrase√±a inicial del usuario */
  password: string;
  /** Lista de roles a asignar al nuevo usuario */
  roles: string[];
  /** N√∫mero de identificaci√≥n del usuario (opcional) */
  identificationNumber?: string;
}

/**
 * ‚úèÔ∏è DTO para actualizaci√≥n de usuarios existentes
 * 
 * Interfaz que define los datos necesarios para actualizar un usuario
 * existente, incluyendo su ID para identificaci√≥n.
 */
export interface UserUpdateDto {
  /** ID √∫nico del usuario a actualizar */
  id: string;
  /** N√∫mero de identificaci√≥n del usuario */
  identificationNumber: string;
  /** Direcci√≥n de correo electr√≥nico del usuario */
  email: string;
  /** Nombre de usuario √∫nico para login */
  userName: string;
  /** Estado de confirmaci√≥n del correo electr√≥nico */
  emailConfirmed: boolean;
  /** Lista de roles asignados al usuario */
  roles: string[];
  /** Estado de bloqueo de la cuenta */
  isLocked: boolean;
}
