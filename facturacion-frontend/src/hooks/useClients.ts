/**
 * ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
 * üë• HOOK PERSONALIZADO PARA GESTI√ìN DE CLIENTES
 * ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
 * 
 * Este hook centraliza toda la l√≥gica relacionada con la gesti√≥n de clientes
 * incluyendo operaciones CRUD, validaciones, paginaci√≥n y b√∫squeda.
 * 
 * üéØ FUNCIONALIDADES PRINCIPALES:
 * ‚Ä¢ Operaciones CRUD completas (Create, Read, Update, Delete)
 * ‚Ä¢ Validaci√≥n avanzada de c√©dulas ecuatorianas
 * ‚Ä¢ Sistema de paginaci√≥n autom√°tica
 * ‚Ä¢ B√∫squeda en tiempo real con debounce
 * ‚Ä¢ Manejo de estados de carga y errores
 * ‚Ä¢ Integraci√≥n con sistema de notificaciones moderno
 * ‚Ä¢ Validaci√≥n de campos con mensajes espec√≠ficos
 * ‚Ä¢ Prevenci√≥n de duplicados por c√©dula/email
 * 
 * üîß VALIDACIONES IMPLEMENTADAS:
 * ‚Ä¢ Algoritmo oficial de validaci√≥n de c√©dula ecuatoriana
 * ‚Ä¢ Validaci√≥n de formato de email
 * ‚Ä¢ Verificaci√≥n de longitud de campos
 * ‚Ä¢ Validaci√≥n de caracteres permitidos
 * ‚Ä¢ Prevenci√≥n de duplicados en la base de datos
 * ‚Ä¢ Validaci√≥n de n√∫meros de tel√©fono
 * 
 * üöÄ MEJORAS FUTURAS SUGERIDAS:
 * ‚Ä¢ Validaci√≥n de RUC para empresas
 * ‚Ä¢ Soporte para pasaportes internacionales
 * ‚Ä¢ Geocodificaci√≥n de direcciones
 * ‚Ä¢ Validaci√≥n de c√≥digos postales
 * ‚Ä¢ Sistema de tags/categor√≠as para clientes
 * ‚Ä¢ Historial de transacciones por cliente
 * ‚Ä¢ Integraci√≥n con APIs de verificaci√≥n de identidad
 * ‚Ä¢ Sistema de calificaci√≥n/scoring de clientes
 * ‚Ä¢ Exportaci√≥n a diferentes formatos (CSV, Excel, PDF)
 * ‚Ä¢ Importaci√≥n masiva desde archivos
 * 
 * üí° EJEMPLO DE USO:
 * ```typescript
 * const { 
 *   clients, 
 *   loading, 
 *   createClient, 
 *   updateClient, 
 *   deleteClient 
 * } = useClients({ 
 *   pageNumber: 1, 
 *   pageSize: 10, 
 *   searchTerm: '' 
 * });
 * ```
 * ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
 */

import { useState, useEffect, useRef } from 'react';
import { notifications } from '../utils/notifications';
import type { ClientDto } from '../@types/clients';
import { clientService } from '../services/clientService';

/**
 * üÜî VALIDADOR DE C√âDULA ECUATORIANA
 * 
 * Implementa el algoritmo oficial de validaci√≥n de c√©dulas de Ecuador
 * seg√∫n las especificaciones del Registro Civil.
 * 
 * @param cedula - N√∫mero de c√©dula como string de 10 d√≠gitos
 * @returns boolean - true si la c√©dula es v√°lida, false en caso contrario
 * 
 * üîç ALGORITMO DE VALIDACI√ìN:
 * 1. Verifica que tenga exactamente 10 d√≠gitos num√©ricos
 * 2. Valida que los primeros 2 d√≠gitos correspondan a una provincia v√°lida (01-24)
 * 3. Verifica que el tercer d√≠gito sea menor a 6 (reservado para personas naturales)
 * 4. Aplica el algoritmo de m√≥dulo 10 con coeficientes espec√≠ficos
 * 5. Compara el d√≠gito verificador calculado con el proporcionado
 * 
 * üí° CASOS ESPECIALES:
 * ‚Ä¢ Provincias v√°lidas: 01-24 (Azuay hasta Orellana + zonas no delimitadas)
 * ‚Ä¢ Tercer d√≠gito: 0-5 para personas naturales, 6-8 para empresas p√∫blicas, 9 para jur√≠dicas
 * ‚Ä¢ Coeficientes: [2,1,2,1,2,1,2,1,2] aplicados a los primeros 9 d√≠gitos
 * 
 * üöÄ MEJORAS FUTURAS:
 * ‚Ä¢ Soporte para validaci√≥n de RUC (empresas)
 * ‚Ä¢ Cache de validaciones para mejorar performance
 * ‚Ä¢ Integraci√≥n con API del Registro Civil para verificaci√≥n online
 * ‚Ä¢ Validaci√≥n de c√©dulas de extranjeros residentes
 */

const validateCedula = (cedula: string): boolean => {
  const tamanoLongitudCedula = 10;
  const coeficientes = [2, 1, 2, 1, 2, 1, 2, 1, 2];
  const numeroProvincias = 24;
  const tercerDigito = 6;

  if (!/^[0-9]+$/.test(cedula) || cedula.length !== tamanoLongitudCedula) {
    return false;
  }

  const provincia = parseInt(cedula.substring(0, 2), 10);
  const digitoTres = parseInt(cedula[2], 10);

  if (provincia <= 0 || provincia > numeroProvincias || digitoTres >= tercerDigito) {
    return false;
  }

  const digitoVerificadorRecibido = parseInt(cedula[9], 10);
  let total = 0;

  for (let k = 0; k < coeficientes.length; k++) {
    const valor = coeficientes[k] * parseInt(cedula[k], 10);
    total += valor >= 10 ? valor - 9 : valor;
  }

  const digitoVerificadorObtenido = total % 10 === 0 ? 0 : 10 - (total % 10);

  return digitoVerificadorObtenido === digitoVerificadorRecibido;
};

export const validateClientFieldsUpdate = (
  client: Partial<ClientDto>,
  existingClients: ClientDto[] = [],
  validateCedulaField: boolean = true
) => {
  const errors: Record<string, string> = {};

  if (validateCedulaField) {
    if (!client.identificationNumber?.trim() ) {
      errors.identificationNumber = 'El n√∫mero de identificaci√≥n es obligatorio';
    } else if (client.identificationNumber.length !== 10) {
      errors.identificationNumber = 'La c√©dula debe tener exactamente 10 caracteres';
    } else if (!/^[0-9]+$/.test(client.identificationNumber)) {
      errors.identificationNumber = 'La c√©dula solo debe contener n√∫meros';
    
    } else if ( !validateCedula(client.identificationNumber)) {
      errors.identificationNumber = 'La c√©dula no es v√°lida';
    }
  }
  if (!client.firstName?.trim()) {
    errors.firstName = 'El nombre es obligatorio';
  } else if (client.firstName.length > 50) {
    errors.firstName = 'El nombre no puede superar los 50 caracteres';
  } else if (!/^[A-Za-z√°√©√≠√≥√∫√Å√â√ç√ì√ö√±√ë ]+$/.test(client.firstName)) {
    errors.firstName = 'El nombre solo puede contener letras y espacios';
  }

  if (!client.lastName?.trim()) {
    errors.lastName = 'El apellido es obligatorio';
  } else if (client.lastName.length > 50) {
    errors.lastName = 'El apellido no puede superar los 50 caracteres';
  } else if (!/^[A-Za-z√°√©√≠√≥√∫√Å√â√ç√ì√ö√±√ë ]+$/.test(client.lastName)) {
    errors.lastName = 'El apellido solo puede contener letras y espacios';
  }

  if (!client.phone?.trim()) {
    errors.phone = 'El tel√©fono es obligatorio';
  } else if (client.phone.length > 10 || client.phone.length < 7) {
    errors.phone = 'El tel√©fono no puede superar los 10 caracteres';
  } else if (!/^[0-9]+$/.test(client.phone)) {
    errors.phone = 'El tel√©fono solo debe contener n√∫meros';
  }
  

  if (!client.email?.trim()) {
    errors.email = 'El correo electr√≥nico es obligatorio';
  } else if (!/^[^@\s]+@[^@\s]+\.[^@\s]+$/.test(client.email)) {
    errors.email = 'El correo electr√≥nico no es v√°lido';
  }

  if (!client.address?.trim()) {
    errors.address = 'La direcci√≥n es obligatoria';
  } else if (client.address.length > 100) {
    errors.address = 'La direcci√≥n no puede superar los 100 caracteres';
  }
  return errors;
};

export const validateClientFields = (
  client: Partial<ClientDto>,
  existingClients: ClientDto[] = [],
  validateCedulaField: boolean = true
) => {
  const errors: Record<string, string> = {};

  if (validateCedulaField) {
    if (!client.identificationNumber?.trim() ) {
      errors.identificationNumber = 'El n√∫mero de identificaci√≥n es obligatorio';
    } else if (client.identificationNumber.length !== 10) {
      errors.identificationNumber = 'La c√©dula debe tener exactamente 10 caracteres';
    } else if (!/^[0-9]+$/.test(client.identificationNumber)) {
      errors.identificationNumber = 'La c√©dula solo debe contener n√∫meros';
    } else if (existingClients.some((c) => c.identificationNumber === client.identificationNumber)) {
      errors.identificationNumber = 'Ya existe un cliente con esta c√©dula';
    } else if ( !validateCedula(client.identificationNumber)) {
      errors.identificationNumber = 'La c√©dula no es v√°lida';
    }
  }
  if (!client.firstName?.trim()) {
    errors.firstName = 'El nombre es obligatorio';
  } else if (client.firstName.length > 50) {
    errors.firstName = 'El nombre no puede superar los 50 caracteres';
  } else if (!/^[A-Za-z√°√©√≠√≥√∫√Å√â√ç√ì√ö√±√ë ]+$/.test(client.firstName)) {
    errors.firstName = 'El nombre solo puede contener letras y espacios';
  }

  if (!client.lastName?.trim()) {
    errors.lastName = 'El apellido es obligatorio';
  } else if (client.lastName.length > 50) {
    errors.lastName = 'El apellido no puede superar los 50 caracteres';
  } else if (!/^[A-Za-z√°√©√≠√≥√∫√Å√â√ç√ì√ö√±√ë ]+$/.test(client.lastName)) {
    errors.lastName = 'El apellido solo puede contener letras y espacios';
  }

  if (!client.phone?.trim()) {
    errors.phone = 'El tel√©fono es obligatorio';
  } else if (client.phone.length > 10 || client.phone.length < 7) {
    errors.phone = 'El tel√©fono no puede superar los 10 caracteres';
  } else if (!/^[0-9]+$/.test(client.phone)) {
    errors.phone = 'El tel√©fono solo debe contener n√∫meros';
  }
  

  if (!client.email?.trim()) {
    errors.email = 'El correo electr√≥nico es obligatorio';
  } else if (!/^[^@\s]+@[^@\s]+\.[^@\s]+$/.test(client.email)) {
    errors.email = 'El correo electr√≥nico no es v√°lido';
  }

  if (!client.address?.trim()) {
    errors.address = 'La direcci√≥n es obligatoria';
  } else if (client.address.length > 100) {
    errors.address = 'La direcci√≥n no puede superar los 100 caracteres';
  }
  return errors;
};

export const useClients = ({ pageNumber, pageSize, searchTerm }: { pageNumber: number; pageSize: number; searchTerm: string }) => {
  const [clients, setClients] = useState<ClientDto[]>([]);
  const [totalItems, setTotalItems] = useState<number>(0);
  const [loading, setLoading] = useState(false);
  const [searching, setSearching] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [isInitialLoad, setIsInitialLoad] = useState(true);
  const searchTimeoutRef = useRef<number | null>(null);

  useEffect(() => {
    const fetchClients = async () => {
      // Solo mostrar loading completo en la carga inicial
      if (isInitialLoad) {
        setLoading(true);
      } else {
        // Para b√∫squedas, usar un estado separado
        setSearching(true);
      }
      
      setError(null);
      
      try {
        const response = await clientService.getAllClients({ pageNumber, pageSize, searchTerm });
        setClients(response.data.items);
        setTotalItems(response.data.totalCount);
      } catch (err) {
        setError(err instanceof Error ? err.message : 'Error desconocido');
        notifications.error('Error al cargar clientes. Por favor, intente nuevamente.');
      } finally {
        setLoading(false);
        setSearching(false);
        setIsInitialLoad(false);
      }
    };

    // Limpiar timeout anterior
    if (searchTimeoutRef.current) {
      clearTimeout(searchTimeoutRef.current);
    }

    // Si es b√∫squeda (no carga inicial), aplicar debounce
    if (!isInitialLoad && searchTerm !== '') {
      searchTimeoutRef.current = setTimeout(() => {
        fetchClients();
      }, 300); // 300ms de debounce
    } else {
      // Carga inmediata para carga inicial o b√∫squeda vac√≠a
      fetchClients();
    }

    // Cleanup
    return () => {
      if (searchTimeoutRef.current) {
        clearTimeout(searchTimeoutRef.current);
      }
    };
  }, [pageNumber, pageSize, searchTerm, isInitialLoad]);

  const createClient = async (client: ClientDto) => {
    const errors = validateClientFields(client, clients);
    if (Object.keys(errors).length > 0) {
      throw new Error('Error en los datos del cliente. Por favor, revise los campos.');
    }

    try {
      await clientService.createClient(client);
      setClients((prev) => [...prev, client]);
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Error desconocido');
      // Re-lanzar el error para que sea manejado por el componente
      throw err;
    }
  };

  const updateClient = async (clientId: number, client: ClientDto) => {
    const errors = validateClientFieldsUpdate(client, clients, false); // No validar c√©dula en actualizaci√≥n
    if (Object.keys(errors).length > 0) {
      notifications.error('Error en los datos del cliente. Por favor, revise los campos.');
      return;
    }

    try {
      await clientService.updateClient(clientId, client);
      setClients((prev) =>
        prev.map((c) => (c.clientId === clientId ? { ...c, ...client } : c))
      );
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Error desconocido');
      notifications.error('Error al actualizar cliente. Por favor, intente nuevamente.');
    }
  };

  const deleteClient = async (clientId: number) => {
    try {
      await clientService.deleteClient(clientId);
      setClients((prev) => prev.filter((c) => c.clientId !== clientId));
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Error desconocido');
      notifications.error('Error al eliminar cliente. Por favor, intente nuevamente.');
    }
  };

  return { clients, totalItems, loading, searching, error, createClient, updateClient, deleteClient };
};



