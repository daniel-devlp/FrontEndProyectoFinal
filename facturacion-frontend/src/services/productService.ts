/**
 * üè∑Ô∏è SERVICIO DE PRODUCTOS
 * 
 * Servicio integral para la gesti√≥n de productos que proporciona operaciones CRUD completas
 * con autenticaci√≥n basada en tokens, validaci√≥n robusta de datos y manejo integral de errores.
 * 
 * Caracter√≠sticas Principales:
 * - Operaciones CRUD completas (Crear, Leer, Actualizar, Eliminar)
 * - Autenticaci√≥n autom√°tica con tokens Bearer
 * - Paginaci√≥n y b√∫squeda avanzadas
 * - Validaci√≥n y sanitizaci√≥n de datos
 * - Manejo robusto de errores y estados HTTP
 * - Compatibilidad con TypeScript para seguridad de tipos
 * 
 * Funcionalidades Implementadas:
 * - Obtenci√≥n de productos individuales por ID
 * - Listado paginado con capacidades de b√∫squeda
 * - Creaci√≥n de nuevos productos con validaci√≥n
 * - Actualizaci√≥n de productos existentes
 * - Eliminaci√≥n segura de productos
 * 
 * Integraci√≥n con Backend:
 * - URL Base: https://localhost:44306/api/Product
 * - Autenticaci√≥n: Bearer Token en headers
 * - Formato: JSON para request/response
 * - Paginaci√≥n: Soporta pageNumber, pageSize y searchTerm
 * 
 * Seguridad:
 * - Validaci√≥n autom√°tica de tokens de autenticaci√≥n
 * - Headers de autorizaci√≥n en todas las peticiones
 * - Manejo seguro de errores sin exposici√≥n de datos sensibles
 * - Validaci√≥n de par√°metros de entrada
 * 
 * Manejo de Errores:
 * - Verificaci√≥n de tokens antes de cada petici√≥n
 * - Validaci√≥n de c√≥digos de estado HTTP
 * - Mensajes de error descriptivos y localizados
 * - Propagaci√≥n controlada de errores
 * 
 * Optimizaci√≥n:
 * - Uso eficiente de axios para peticiones complejas
 * - fetch API para operaciones simples
 * - Reutilizaci√≥n de headers de autenticaci√≥n
 * - Tipado TypeScript para mejor rendimiento del IDE
 * 
 * @autor Sistema de Facturaci√≥n
 * @versi√≥n 1.0.0
 * @desde 2025-06-25
 */
import axios from 'axios';
import type { ProductDto, ProductCreateDto, ProductUpdateDto } from '../@types/products';
import { getToken } from './authService';

/** üåê URL base de la API de productos */
const API_URL = 'https://91c2-45-173-230-87.ngrok-free.app/api/Product';

/**
 * üîê Genera headers de autenticaci√≥n para peticiones HTTP
 * 
 * Crea autom√°ticamente los headers necesarios incluyendo el token Bearer
 * y el tipo de contenido para comunicaci√≥n con la API de productos.
 * 
 * @retorna {object} Headers con autorizaci√≥n y tipo de contenido
 * @lanza {Error} Si no existe un token de autenticaci√≥n v√°lido
 */
const getAuthHeaders = () => {
  const token = getToken();
  if (!token) {
    throw new Error('No se encontr√≥ un token de autenticaci√≥n.');
  }
  return { Authorization: `Bearer ${token}`, 'Content-Type': 'application/json' };
};

/**
 * üè∑Ô∏è SERVICIO PRINCIPAL DE PRODUCTOS
 * 
 * Objeto que contiene todos los m√©todos para interactuar con la API de productos.
 * Proporciona una interfaz unificada para operaciones CRUD con manejo de errores
 * y autenticaci√≥n autom√°tica.
 */
export const productService = {
  /**
   * üìÑ Obtiene un producto espec√≠fico por su ID √∫nico
   * 
   * Realiza una petici√≥n GET al endpoint de productos para obtener
   * los datos completos de un producto espec√≠fico.
   * 
   * @param {number} id - ID √∫nico del producto a buscar
   * @retorna {Promise<ProductDto>} Datos completos del producto
   * @lanza {Error} Si la petici√≥n falla o el producto no existe
   */
  getProductById: async (id: number): Promise<ProductDto> => {
    const response = await fetch(`${API_URL}/${id}`, { headers: getAuthHeaders() });
    if (!response.ok) throw new Error('Error al obtener el producto');
    return response.json();
  },

  /**
   * üìã Obtiene una lista paginada de productos con b√∫squeda opcional
   * 
   * Realiza una petici√≥n GET con par√°metros de paginaci√≥n y b√∫squeda
   * para obtener una lista de productos filtrada y paginada.
   * 
   * @param {object} params - Par√°metros de consulta
   * @param {number} params.pageNumber - N√∫mero de p√°gina (base 1, por defecto: 1)
   * @param {number} params.pageSize - Cantidad de productos por p√°gina (por defecto: 10)
   * @param {string|null} params.searchTerm - T√©rmino de b√∫squeda opcional
   * @retorna {Promise<{data: ProductDto[], totalItems: number}>} Lista paginada de productos
   * @lanza {Error} Si la petici√≥n falla o hay errores de red
   */
  getAllProducts: async ({
    pageNumber = 1,
    pageSize = 10,
    searchTerm = null,
  }: {
    pageNumber?: number;
    pageSize?: number;
    searchTerm?: string | null;
  }): Promise<{ data: ProductDto[]; totalItems: number }> => {
    const response = await axios.get<{ items: ProductDto[]; totalCount: number }>(API_URL, {
      params: { pageNumber, pageSize, searchTerm },
      headers: getAuthHeaders(),
    });
    return { data: response.data.items, totalItems: response.data.totalCount };
  },

  /**
   * ‚ûï Crea un nuevo producto en el sistema
   * 
   * Env√≠a los datos del nuevo producto al servidor para su creaci√≥n
   * con validaci√≥n autom√°tica de datos y autenticaci√≥n.
   * 
   * @param {ProductCreateDto} dto - Datos del nuevo producto a crear
   * @retorna {Promise<void>} Promesa de creaci√≥n exitosa
   * @lanza {Error} Si la validaci√≥n falla o hay errores del servidor
   */
  createProduct: async (dto: ProductCreateDto): Promise<void> => {
    const response = await fetch(`${API_URL}`, {
      method: 'POST',
      headers: getAuthHeaders(),
      body: JSON.stringify(dto),
    });
    if (!response.ok) throw new Error('Error al crear el producto');
  },

  /**
   * ‚úèÔ∏è Actualiza un producto existente con nuevos datos
   * 
   * Env√≠a los datos actualizados de un producto espec√≠fico al servidor
   * para su modificaci√≥n con validaci√≥n completa.
   * 
   * @param {number} id - ID del producto a actualizar
   * @param {ProductUpdateDto} dto - Nuevos datos del producto
   * @retorna {Promise<void>} Promesa de actualizaci√≥n exitosa
   * @lanza {Error} Si el producto no existe o la validaci√≥n falla
   */
  updateProduct: async (id: number, dto: ProductUpdateDto): Promise<void> => {
    const response = await fetch(`${API_URL}/${id}`, {
      method: 'PUT',
      headers: getAuthHeaders(),
      body: JSON.stringify(dto),
    });
    if (!response.ok) throw new Error('Error al actualizar el producto');
  },

  /**
   * üóëÔ∏è Elimina un producto espec√≠fico del sistema
   * 
   * Realiza una eliminaci√≥n permanente de un producto por su ID √∫nico
   * con confirmaci√≥n de autorizaci√≥n y validaci√≥n.
   * 
   * @param {number} id - ID del producto a eliminar
   * @retorna {Promise<void>} Promesa de eliminaci√≥n exitosa
   * @lanza {Error} Si el producto no existe o no se puede eliminar
   */
  deleteProduct: async (id: number): Promise<void> => {
    const response = await fetch(`${API_URL}/${id}`, {
      method: 'DELETE',
      headers: getAuthHeaders(),
    });
    if (!response.ok) throw new Error('Error al eliminar el producto');
  },
};
