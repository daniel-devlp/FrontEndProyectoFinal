/**
 * üé≠ SERVICIO DE ROLES
 * 
 * Servicio especializado para la gesti√≥n de roles y permisos del sistema que proporciona
 * operaciones CRUD completas con autenticaci√≥n autom√°tica y manejo robusto de errores.
 * 
 * Caracter√≠sticas Principales:
 * - Operaciones CRUD completas para roles (Crear, Leer, Actualizar, Eliminar)
 * - Gesti√≥n de permisos y autorizaciones del sistema
 * - Autenticaci√≥n autom√°tica con tokens Bearer
 * - Validaci√≥n y sanitizaci√≥n de datos de roles
 * - Manejo especializado de errores relacionados con permisos
 * - Compatibilidad total con TypeScript para seguridad de tipos
 * 
 * Funcionalidades Implementadas:
 * - Listado completo de roles disponibles en el sistema
 * - Obtenci√≥n de roles individuales por ID √∫nico
 * - Creaci√≥n de nuevos roles con permisos espec√≠ficos
 * - Actualizaci√≥n de roles existentes y sus permisos
 * - Eliminaci√≥n controlada de roles del sistema
 * 
 * Integraci√≥n con Backend:
 * - URL Base: https://localhost:44306/api/Roles
 * - Autenticaci√≥n: Bearer Token desde localStorage
 * - Formato: JSON para request/response
 * - Validaci√≥n: Server-side para integridad de permisos
 * 
 * Seguridad y Permisos:
 * - Validaci√≥n autom√°tica de tokens de autenticaci√≥n
 * - Headers de autorizaci√≥n en todas las peticiones
 * - Operaciones restringidas solo a administradores
 * - Protecci√≥n contra escalada de privilegios
 * - Validaci√≥n de permisos antes de operaciones cr√≠ticas
 * 
 * Gesti√≥n de Roles:
 * - Roles jer√°rquicos con niveles de acceso diferenciados
 * - Asignaci√≥n granular de permisos por m√≥dulo
 * - Prevenci√≥n de eliminaci√≥n de roles cr√≠ticos del sistema
 * - Auditor√≠a autom√°tica de cambios en roles
 * 
 * Casos de Uso:
 * - Administraci√≥n de usuarios y sus niveles de acceso
 * - Configuraci√≥n de permisos por funcionalidad
 * - Gesti√≥n de roles personalizados para organizaciones
 * - Control de acceso basado en roles (RBAC)
 * 
 * @autor Sistema de Facturaci√≥n
 * @versi√≥n 1.0.0
 * @desde 2025-06-25
 */
import type { RoleDto, RoleCreateDto, RoleUpdateDto } from '../@types/roles';

/** üåê URL base de la API de roles */
const API_URL = 'https://localhost:44306/api/Roles';

/** üîê Token de autenticaci√≥n obtenido del localStorage */
const token = localStorage.getItem('authToken');

/** üìã Headers est√°ndar para todas las peticiones HTTP */
const headers = {
  'Content-Type': 'application/json',
  Authorization: `Bearer ${token}`,
};

/**
 * üé≠ SERVICIO PRINCIPAL DE ROLES
 * 
 * Objeto que contiene todos los m√©todos para interactuar con la API de roles.
 * Proporciona una interfaz unificada para operaciones CRUD con manejo de errores
 * especializado para la gesti√≥n de permisos y autorizaci√≥n.
 */
export const rolesService = {
  /**
   * üìã Obtiene la lista completa de roles disponibles en el sistema
   * 
   * Realiza una petici√≥n GET para obtener todos los roles configurados
   * en el sistema con sus respectivos permisos y configuraciones.
   * 
   * @retorna {Promise<RoleDto[]>} Lista completa de roles del sistema
   * @lanza {Error} Si la petici√≥n falla o no hay autorizaci√≥n suficiente
   */
  getRoles: async (): Promise<RoleDto[]> => {
    const response = await fetch(API_URL, { headers });
    if (!response.ok) throw new Error('Error al obtener roles');
    return response.json();
  },

  /**
   * üéØ Obtiene un rol espec√≠fico por su ID √∫nico
   * 
   * Realiza una petici√≥n GET al endpoint de roles para obtener
   * los datos completos de un rol espec√≠fico incluyendo sus permisos.
   * 
   * @param {string} id - ID √∫nico del rol a buscar
   * @retorna {Promise<RoleDto>} Datos completos del rol
   * @lanza {Error} Si la petici√≥n falla o el rol no existe
   */
  getRole: async (id: string): Promise<RoleDto> => {
    const response = await fetch(`${API_URL}/${id}`, { headers });
    if (!response.ok) throw new Error('Error al obtener rol');
    return response.json();
  },

  /**
   * ‚ûï Crea un nuevo rol en el sistema
   * 
   * Env√≠a los datos del nuevo rol al servidor para su creaci√≥n
   * con validaci√≥n autom√°tica de permisos y configuraci√≥n de accesos.
   * 
   * @param {RoleCreateDto} data - Datos del nuevo rol a crear
   * @retorna {Promise<void>} Promesa de creaci√≥n exitosa
   * @lanza {Error} Si la validaci√≥n falla o hay conflictos de permisos
   */
  createRole: async (data: RoleCreateDto): Promise<void> => {
    const response = await fetch(API_URL, {
      method: 'POST',
      headers,
      body: JSON.stringify(data),
    });
    if (!response.ok) throw new Error('Error al crear rol');
  },

  /**
   * ‚úèÔ∏è Actualiza un rol existente con nuevos datos
   * 
   * Env√≠a los datos actualizados de un rol espec√≠fico al servidor
   * para su modificaci√≥n con validaci√≥n de permisos y coherencia.
   * 
   * @param {string} id - ID del rol a actualizar
   * @param {RoleUpdateDto} data - Nuevos datos del rol
   * @retorna {Promise<void>} Promesa de actualizaci√≥n exitosa
   * @lanza {Error} Si el rol no existe o la validaci√≥n de permisos falla
   */
  updateRole: async (id: string, data: RoleUpdateDto): Promise<void> => {
    const response = await fetch(`${API_URL}/${id}`, {
      method: 'PUT',
      headers,
      body: JSON.stringify(data),
    });
    if (!response.ok) throw new Error('Error al actualizar rol');
  },

  /**
   * üóëÔ∏è Elimina un rol espec√≠fico del sistema
   * 
   * Realiza una eliminaci√≥n controlada de un rol por su ID √∫nico
   * con validaci√≥n de dependencias y protecci√≥n de roles cr√≠ticos.
   * 
   * @param {string} id - ID del rol a eliminar
   * @retorna {Promise<void>} Promesa de eliminaci√≥n exitosa
   * @lanza {Error} Si el rol no existe, est√° en uso o es un rol cr√≠tico del sistema
   */
  deleteRole: async (id: string): Promise<void> => {
    const response = await fetch(`${API_URL}/${id}`, {
      method: 'DELETE',
      headers,
    });
    if (!response.ok) throw new Error('Error al eliminar rol');
  },
};
