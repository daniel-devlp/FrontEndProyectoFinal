/**
 * üë• SERVICIO DE USUARIOS
 * 
 * Servicio integral para la gesti√≥n de usuarios del sistema que proporciona operaciones CRUD completas
 * con autenticaci√≥n basada en tokens, gesti√≥n de perfiles y funcionalidades administrativas especializadas.
 * 
 * Caracter√≠sticas Principales:
 * - Operaciones CRUD completas para usuarios (Crear, Leer, Actualizar, Eliminar)
 * - Gesti√≥n de perfil del usuario actual
 * - Funcionalidades administrativas (desbloqueo de usuarios)
 * - Autenticaci√≥n autom√°tica con tokens Bearer
 * - Validaci√≥n y manejo robusto de errores
 * - Compatibilidad total con TypeScript
 * 
 * Funcionalidades Implementadas:
 * - Listado completo de usuarios (solo administradores)
 * - Obtenci√≥n de usuarios individuales por ID
 * - Creaci√≥n de nuevos usuarios con validaci√≥n
 * - Actualizaci√≥n de datos de usuarios existentes
 * - Eliminaci√≥n segura de usuarios
 * - Desbloqueo de cuentas de usuario
 * - Gesti√≥n del perfil del usuario autenticado
 * 
 * Integraci√≥n con Backend:
 * - URL Base: https://localhost:44306/api/Users
 * - Autenticaci√≥n: Bearer Token desde localStorage
 * - Formato: JSON para request/response
 * - Endpoints especializados: /me, /{id}/unlock
 * 
 * Seguridad:
 * - Validaci√≥n autom√°tica de tokens de autenticaci√≥n
 * - Headers de autorizaci√≥n en todas las peticiones
 * - Operaciones administrativas protegidas
 * - Manejo seguro de datos sensibles de usuario
 * 
 * Funcionalidades Administrativas:
 * - Gesti√≥n completa de usuarios del sistema
 * - Desbloqueo de cuentas bloqueadas
 * - Creaci√≥n de usuarios con roles espec√≠ficos
 * - Eliminaci√≥n controlada con validaciones
 * 
 * Gesti√≥n de Perfil:
 * - Acceso al perfil del usuario autenticado
 * - Actualizaci√≥n de datos personales
 * - Recuperaci√≥n de informaci√≥n de sesi√≥n
 * 
 * @autor Sistema de Facturaci√≥n
 * @versi√≥n 1.0.0
 * @desde 2025-06-25
 */
import type { UserDto, UserCreateDto, UserUpdateDto } from '../@types/users';
import axios from 'axios';

/** üåê URL base de la API de usuarios */
const API_URL = 'https://localhost:44306/api/Users';

/**
 * üîê Genera headers de autenticaci√≥n para peticiones HTTP
 * 
 * Obtiene el token de autenticaci√≥n del localStorage y crea los headers
 * necesarios para comunicaci√≥n autenticada con la API de usuarios.
 * 
 * @retorna {object} Headers con autorizaci√≥n y tipo de contenido
 */
const getAuthHeaders = () => {
  const token = localStorage.getItem('authToken');
  return {
    Authorization: `Bearer ${token}`,
    'Content-Type': 'application/json',
  };
};

/**
 * üë• SERVICIO PRINCIPAL DE USUARIOS
 * 
 * Objeto que contiene todos los m√©todos para interactuar con la API de usuarios.
 * Proporciona una interfaz unificada para operaciones CRUD, gesti√≥n de perfiles
 * y funcionalidades administrativas con manejo de errores y autenticaci√≥n autom√°tica.
 */
export const usersService = {
  /**
   * üìã Obtiene la lista completa de usuarios del sistema
   * 
   * Realiza una petici√≥n GET para obtener todos los usuarios registrados.
   * Esta funci√≥n est√° destinada para uso administrativo √∫nicamente.
   * 
   * @retorna {Promise<UserDto[]>} Lista completa de usuarios del sistema
   * @lanza {Error} Si la petici√≥n falla o no hay autorizaci√≥n suficiente
   */
  getUsers: async (): Promise<UserDto[]> => {
    const response = await fetch(API_URL, { headers: getAuthHeaders() });
    if (!response.ok) throw new Error('Error al obtener usuarios');
    return response.json();
  },

  /**
   * üë§ Obtiene un usuario espec√≠fico por su ID √∫nico
   * 
   * Realiza una petici√≥n GET al endpoint de usuarios para obtener
   * los datos completos de un usuario espec√≠fico.
   * 
   * @param {string} id - ID √∫nico del usuario a buscar
   * @retorna {Promise<UserDto>} Datos completos del usuario
   * @lanza {Error} Si la petici√≥n falla o el usuario no existe
   */
  getUser: async (id: string): Promise<UserDto> => {
    const response = await fetch(`${API_URL}/${id}`, { headers: getAuthHeaders() });
    if (!response.ok) throw new Error('Error al obtener usuario');
    return response.json();
  },

  /**
   * ‚ûï Crea un nuevo usuario en el sistema
   * 
   * Env√≠a los datos del nuevo usuario al servidor para su creaci√≥n
   * con validaci√≥n autom√°tica de datos y asignaci√≥n de roles.
   * 
   * @param {UserCreateDto} data - Datos del nuevo usuario a crear
   * @retorna {Promise<UserDto>} Datos del usuario creado
   * @lanza {Error} Si la validaci√≥n falla o hay errores del servidor
   */
  createUser: async (data: UserCreateDto): Promise<UserDto> => {
    console.log('Datos enviados al backend:', data); // Registro para debugging
    const response = await fetch(API_URL, {
      method: 'POST',
      headers: getAuthHeaders(),
      body: JSON.stringify(data),
    });
    if (!response.ok) throw new Error('Error al crear usuario');
    return response.json();
  },

  /**
   * ‚úèÔ∏è Actualiza un usuario existente con nuevos datos
   * 
   * Env√≠a los datos actualizados de un usuario espec√≠fico al servidor
   * para su modificaci√≥n con validaci√≥n completa de permisos.
   * 
   * @param {string} id - ID del usuario a actualizar
   * @param {UserUpdateDto} data - Nuevos datos del usuario
   * @retorna {Promise<void>} Promesa de actualizaci√≥n exitosa
   * @lanza {Error} Si el usuario no existe o la validaci√≥n falla
   */
  updateUser: async (id: string, data: UserUpdateDto): Promise<void> => {
    const response = await fetch(`${API_URL}/${id}`, {
      method: 'PUT',
      headers: getAuthHeaders(),
      body: JSON.stringify(data),
    });
    if (!response.ok) throw new Error('Error al actualizar usuario');
  },

  /**
   * üóëÔ∏è Elimina un usuario espec√≠fico del sistema
   * 
   * Realiza una eliminaci√≥n permanente de un usuario por su ID √∫nico
   * con validaci√≥n de permisos administrativos y confirmaci√≥n.
   * 
   * @param {string} id - ID del usuario a eliminar
   * @retorna {Promise<void>} Promesa de eliminaci√≥n exitosa
   * @lanza {Error} Si el usuario no existe o no se puede eliminar
   */
  deleteUser: async (id: string): Promise<void> => {
    const response = await fetch(`${API_URL}/${id}`, {
      method: 'DELETE',
      headers: getAuthHeaders(),
    });
    if (!response.ok) throw new Error('Error al eliminar usuario');
  },

  /**
   * üîì Desbloquea una cuenta de usuario bloqueada
   * 
   * Realiza una operaci√≥n administrativa para desbloquear una cuenta
   * de usuario que haya sido bloqueada por intentos fallidos de login
   * o por pol√≠ticas de seguridad.
   * 
   * @param {string} id - ID del usuario a desbloquear
   * @retorna {Promise<void>} Promesa de desbloqueo exitoso
   * @lanza {Error} Si el usuario no existe o no se puede desbloquear
   */
  unlockUser: async (id: string): Promise<void> => {
    const response = await fetch(`${API_URL}/${id}/unlock`, {
      method: 'POST',
      headers: getAuthHeaders(),
    });
    if (!response.ok) throw new Error('Error al desbloquear usuario');
  },

  /**
   * üë§ Obtiene el perfil del usuario autenticado actualmente
   * 
   * Realiza una petici√≥n al endpoint especializado para obtener
   * los datos del perfil del usuario que est√° actualmente autenticado.
   * 
   * @retorna {Promise<UserDto>} Datos del perfil del usuario actual
   * @lanza {Error} Si no hay sesi√≥n activa o la petici√≥n falla
   */
  getMyProfile: async (): Promise<UserDto> => {
    const response = await fetch(`${API_URL}/me`, { headers: getAuthHeaders() });
    if (!response.ok) throw new Error('Error al obtener perfil');
    return response.json();
  },

  /**
   * üîç Obtiene informaci√≥n del usuario actual (m√©todo alternativo)
   * 
   * M√©todo alternativo que utiliza axios para obtener informaci√≥n
   * del usuario actualmente autenticado. √ötil para casos especiales
   * donde se requiera el objeto de respuesta completo de axios.
   * 
   * @retorna {Promise<any>} Datos del usuario actual via axios
   * @lanza {Error} Si no hay sesi√≥n activa o la petici√≥n falla
   */
  getCurrentUser: async () => {
    const response = await axios.get(`${API_URL}/me`, { headers: getAuthHeaders() });
    return response.data;
  },
};
