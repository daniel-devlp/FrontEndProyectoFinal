import React from 'react';
import toast from 'react-hot-toast';
import '../../assets/styles/ConfirmToast.css';

/**
 * ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
 * ü§î COMPONENTE DE CONFIRMACI√ìN PERSONALIZADO
 * ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
 * 
 * Este componente reemplaza completamente los di√°logos nativos del navegador
 * (window.confirm, window.alert) proporcionando una experiencia visual
 * consistente con el dise√±o de la aplicaci√≥n.
 * 
 * üéØ OBJETIVOS PRINCIPALES:
 * ‚Ä¢ Mantener consistencia visual con el resto de la aplicaci√≥n
 * ‚Ä¢ Proporcionar mejor control sobre la experiencia de usuario
 * ‚Ä¢ Permitir personalizaci√≥n completa de textos y estilos
 * ‚Ä¢ Funcionar correctamente en todos los navegadores modernos
 * ‚Ä¢ Ser completamente accesible para usuarios con discapacidades
 * 
 * üé® CARACTER√çSTICAS DE DISE√ëO:
 * ‚Ä¢ Modal centrado con overlay semi-transparente
 * ‚Ä¢ Animaciones suaves de entrada y salida
 * ‚Ä¢ Botones con colores contextuales (rojo para destructivo, azul para constructivo)
 * ‚Ä¢ Typography consistente con el design system
 * ‚Ä¢ Responsive design que se adapta a cualquier tama√±o de pantalla
 * ‚Ä¢ Soporte para contenido variable (con/sin t√≠tulo)
 * 
 * üîß FUNCIONALIDADES T√âCNICAS:
 * ‚Ä¢ Integraci√≥n perfecta con react-hot-toast
 * ‚Ä¢ Manejo autom√°tico de dismissal al hacer clic en botones
 * ‚Ä¢ Props flexibles para diferentes tipos de confirmaci√≥n
 * ‚Ä¢ Event handling robusto para interacciones de usuario
 * ‚Ä¢ CSS scoped para evitar conflictos de estilos
 * 
 * üöÄ MEJORAS FUTURAS SUGERIDAS:
 * ‚Ä¢ Soporte para escape con tecla ESC
 * ‚Ä¢ Click fuera del modal para cancelar (opcional)
 * ‚Ä¢ Soporte para iconos contextuales autom√°ticos
 * ‚Ä¢ Animaciones m√°s sofisticadas (spring animations)
 * ‚Ä¢ Soporte para contenido HTML rico
 * ‚Ä¢ Diferentes tama√±os de modal (small, medium, large)
 * ‚Ä¢ Temas personalizables (dark mode, custom colors)
 * ‚Ä¢ Soporte para m√∫ltiples botones de acci√≥n
 * ‚Ä¢ Integraci√≥n con sistema de shortcuts de teclado
 * ‚Ä¢ Logging de interacciones para analytics
 * 
 * üí° CASOS DE USO:
 * ‚Ä¢ Confirmaci√≥n antes de eliminar registros
 * ‚Ä¢ Confirmar acciones irreversibles
 * ‚Ä¢ Validar cambios importantes
 * ‚Ä¢ Mostrar advertencias cr√≠ticas
 * ‚Ä¢ Solicitar confirmaci√≥n para navegaci√≥n con cambios sin guardar
 * ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
 */

/**
 * üìã INTERFAZ DE PROPIEDADES DEL COMPONENTE
 * Define todos los par√°metros que acepta el componente ConfirmToast
 */
interface ConfirmToastProps {
  /** 
   * üÜî Objeto toast de react-hot-toast
   * Contiene metadata del toast incluyendo el ID √∫nico para dismissal
   */
  t: any;

  /** 
   * üìù T√≠tulo opcional del modal
   * Se muestra en la parte superior con tipograf√≠a destacada
   * Si no se proporciona, el modal ser√° m√°s compacto
   */
  title?: string;

  /** 
   * üí¨ Mensaje principal de confirmaci√≥n
   * Texto descriptivo que explica qu√© acci√≥n se va a realizar
   * Debe ser claro, espec√≠fico y en lenguaje amigable para el usuario
   */
  message: string;

  /** 
   * ‚úÖ Texto del bot√≥n de confirmaci√≥n
   * Debe ser espec√≠fico a la acci√≥n (ej: "S√≠, eliminar", "Continuar", "Guardar")
   * El estilo del bot√≥n se adapta autom√°ticamente al contexto
   */
  confirmText: string;

  /** 
   * ‚ùå Texto del bot√≥n de cancelaci√≥n
   * Generalmente "Cancelar" pero puede personalizarse seg√∫n el contexto
   * Siempre debe ofrecer una salida segura al usuario
   */
  cancelText: string;

  /** 
   * üéØ Callback ejecutado cuando el usuario confirma
   * Funci√≥n que se llama inmediatamente despu√©s de cerrar el modal
   * Debe contener la l√≥gica de la acci√≥n a realizar
   */
  onConfirm: () => void;

  /** 
   * üö™ Callback ejecutado cuando el usuario cancela
   * Funci√≥n que se llama cuando el usuario decide no continuar
   * Puede ser simplemente una funci√≥n vac√≠a o contener l√≥gica de cleanup
   */
  onCancel: () => void;
}

/**
 * üé≠ COMPONENTE PRINCIPAL CONFIRMTOAST
 * 
 * Renderiza un modal de confirmaci√≥n personalizado que reemplaza
 * los di√°logos nativos del navegador con una experiencia visual
 * consistente y moderna.
 * 
 * @param props - Propiedades del componente seg√∫n ConfirmToastProps
 * @returns JSX.Element - Modal de confirmaci√≥n completamente funcional
 */
const ConfirmToast: React.FC<ConfirmToastProps> = ({
  t,
  title,
  message,
  confirmText,
  cancelText,
  onConfirm,
  onCancel,
}) => {
  /**
   * üü¢ MANEJADOR DE CONFIRMACI√ìN
   * 
   * Se ejecuta cuando el usuario hace clic en el bot√≥n de confirmaci√≥n.
   * Primero cierra el modal y luego ejecuta la acci√≥n confirmada.
   * 
   * üîÑ Flujo de ejecuci√≥n:
   * 1. Cierra inmediatamente el toast usando su ID √∫nico
   * 2. Ejecuta el callback onConfirm proporcionado por el padre
   * 3. El callback padre maneja la l√≥gica espec√≠fica de la acci√≥n
   * 
   * üí° Consideraciones de UX:
   * ‚Ä¢ El modal se cierra inmediatamente para dar feedback visual r√°pido
   * ‚Ä¢ La acci√≥n se ejecuta despu√©s del cierre para evitar lag visual
   * ‚Ä¢ Si la acci√≥n toma tiempo, el componente padre debe mostrar loading
   */
  const handleConfirm = () => {
    toast.dismiss(t.id); // Cierra el modal inmediatamente
    onConfirm(); // Ejecuta la acci√≥n confirmada
  };

  /**
   * üî¥ MANEJADOR DE CANCELACI√ìN
   * 
   * Se ejecuta cuando el usuario hace clic en el bot√≥n de cancelaci√≥n.
   * Cierra el modal y ejecuta cualquier l√≥gica de cleanup necesaria.
   * 
   * üîÑ Flujo de ejecuci√≥n:
   * 1. Cierra inmediatamente el toast
   * 2. Ejecuta el callback onCancel (generalmente vac√≠o)
   * 3. El usuario regresa al estado anterior sin cambios
   * 
   * üí° Consideraciones de UX:
   * ‚Ä¢ Proporciona una salida segura sin consecuencias
   * ‚Ä¢ No debe ejecutar ninguna acci√≥n destructiva
   * ‚Ä¢ Puede usarse para analytics (tracking de cancelaciones)
   */
  const handleCancel = () => {
    toast.dismiss(t.id); // Cierra el modal inmediatamente
    onCancel(); // Ejecuta l√≥gica de cancelaci√≥n (si existe)
  };

  /**
   * üé® RENDERIZADO DEL COMPONENTE
   * 
   * Estructura visual del modal de confirmaci√≥n con:
   * ‚Ä¢ Container principal con overlay
   * ‚Ä¢ √Årea de contenido centrada
   * ‚Ä¢ T√≠tulo opcional (solo si se proporciona)
   * ‚Ä¢ Mensaje principal siempre visible
   * ‚Ä¢ √Årea de botones con cancelar (izquierda) y confirmar (derecha)
   * 
   * üîß Clases CSS aplicadas:
   * ‚Ä¢ confirm-toast: Container principal con overlay
   * ‚Ä¢ confirm-toast-content: √Årea de contenido centrada
   * ‚Ä¢ confirm-toast-title: T√≠tulo opcional (h4)
   * ‚Ä¢ confirm-toast-message: Mensaje principal (p√°rrafo)
   * ‚Ä¢ confirm-toast-buttons: Container de botones (flexbox)
   * ‚Ä¢ confirm-toast-btn: Clase base para botones
   * ‚Ä¢ confirm-toast-btn-cancel: Estilo espec√≠fico para bot√≥n cancelar
   * ‚Ä¢ confirm-toast-btn-confirm: Estilo espec√≠fico para bot√≥n confirmar
   * 
   * üéØ Orden de los botones:
   * ‚Ä¢ Cancelar a la izquierda (acci√≥n segura)
   * ‚Ä¢ Confirmar a la derecha (acci√≥n principal)
   * ‚Ä¢ Sigue convenciones de UX est√°ndares
   */
  return (
    <div className="confirm-toast">
      <div className="confirm-toast-content">
        {/* T√≠tulo opcional - solo se renderiza si se proporciona */}
        {title && <h4 className="confirm-toast-title">{title}</h4>}
        
        {/* Mensaje principal - siempre visible */}
        <p className="confirm-toast-message">{message}</p>
        
        {/* √Årea de botones */}
        <div className="confirm-toast-buttons">
          {/* Bot√≥n Cancelar - acci√≥n segura, posici√≥n izquierda */}
          <button
            className="confirm-toast-btn confirm-toast-btn-cancel"
            onClick={handleCancel}
            type="button" // Previene env√≠o de formularios accidental
          >
            {cancelText}
          </button>
          
          {/* Bot√≥n Confirmar - acci√≥n principal, posici√≥n derecha */}
          <button
            className="confirm-toast-btn confirm-toast-btn-confirm"
            onClick={handleConfirm}
            type="button" // Previene env√≠o de formularios accidental
          >
            {confirmText}
          </button>
        </div>
      </div>
    </div>
  );
};

export default ConfirmToast;

/**
 * ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
 * üìö DOCUMENTACI√ìN DE USO PARA DESARROLLADORES
 * ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
 * 
 * üéØ EJEMPLO DE USO B√ÅSICO:
 * ```typescript
 * import { confirmAction } from '../utils/notifications';
 * 
 * const handleDelete = async () => {
 *   const confirmed = await confirmAction(
 *     '¬øEst√° seguro de eliminar este elemento?',
 *     'Confirmar Eliminaci√≥n',
 *     'S√≠, eliminar',
 *     'Cancelar'
 *   );
 *   
 *   if (confirmed) {
 *     // Proceder con la eliminaci√≥n
 *     await deleteItem();
 *   }
 * };
 * ```
 * 
 * üîß PERSONALIZACI√ìN AVANZADA:
 * ‚Ä¢ Modificar estilos en ConfirmToast.css
 * ‚Ä¢ Agregar nuevas variantes de botones
 * ‚Ä¢ Implementar diferentes tama√±os de modal
 * ‚Ä¢ A√±adir animaciones personalizadas
 * 
 * üöÄ EXTENSIONES FUTURAS:
 * ‚Ä¢ ConfirmToastWithIcon: Variante con iconos contextuales
 * ‚Ä¢ ConfirmToastLarge: Para contenido m√°s extenso
 * ‚Ä¢ ConfirmToastDestructive: Variante espec√≠fica para acciones peligrosas
 * ‚Ä¢ ConfirmToastMultiAction: Soporte para m√°s de 2 botones
 * ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
 */
